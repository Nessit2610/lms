package com.husc.lms.mongoRepository;

import java.util.Date;

import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import com.husc.lms.mongoEntity.ChatBox;
import com.husc.lms.mongoEntity.ChatBoxMember;
import com.husc.lms.mongoEntity.ChatMessage;

import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class MongoTestSeeder implements CommandLineRunner {

    private final ChatMessageRepository chatMessageRepository;
    private final ChatBoxRepository chatBoxRepository;
    private final ChatBoxMemberRepository chatBoxMemberRepository;

    @Override
    public void run(String... args) throws Exception {
        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ChatBox n√†o trong MongoDB
        if (chatBoxRepository.count() == 0) {
            // T·∫°o ChatBox (ph√≤ng chat)
            ChatBox chatBox = ChatBox.builder()
                    .isGroup(true) // l√† group chat
                    .createdAt(new Date())
                    .createdBy("acc1") // ng∆∞·ªùi t·∫°o ph√≤ng
                    .name("LMS Group Chat") // t√™n ph√≤ng
                    .build();
            chatBoxRepository.save(chatBox);

            // T·∫°o ChatBoxMember (th√†nh vi√™n tham gia chatbox)
            ChatBoxMember member1 = ChatBoxMember.builder()
                    .chatBoxId(chatBox.getId()) // li√™n k·∫øt v·ªõi chatBox v·ª´a t·∫°o
                    .accountId("acc1") // t√†i kho·∫£n tham gia
                    .joinedAt(new Date()) // th·ªùi gian tham gia
                    .build();

            ChatBoxMember member2 = ChatBoxMember.builder()
                    .chatBoxId(chatBox.getId()) // li√™n k·∫øt v·ªõi chatBox v·ª´a t·∫°o
                    .accountId("acc2") // t√†i kho·∫£n tham gia
                    .joinedAt(new Date()) // th·ªùi gian tham gia
                    .build();

            chatBoxMemberRepository.save(member1);
            chatBoxMemberRepository.save(member2);

            // T·∫°o ChatMessage (tin nh·∫Øn trong ph√≤ng chat)
            ChatMessage message1 = ChatMessage.builder()
                    .chatBoxId(chatBox.getId()) // li√™n k·∫øt v·ªõi chatBox
                    .senderId("acc1") // ng∆∞·ªùi g·ª≠i
                    .content("Hello everyone!") // n·ªôi dung tin nh·∫Øn
                    .createdAt(new Date()) // th·ªùi gian g·ª≠i
                    .build();

            ChatMessage message2 = ChatMessage.builder()
                    .chatBoxId(chatBox.getId()) // li√™n k·∫øt v·ªõi chatBox
                    .senderId("acc2") // ng∆∞·ªùi g·ª≠i
                    .content("Hi, how are you?") // n·ªôi dung tin nh·∫Øn
                    .createdAt(new Date()) // th·ªùi gian g·ª≠i
                    .build();

            chatMessageRepository.save(message1);
            chatMessageRepository.save(message2);

            System.out.println("‚úÖ D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MongoDB.");
        } else {
            System.out.println("üî¥ D·ªØ li·ªáu ƒë√£ c√≥ trong MongoDB, kh√¥ng t·∫°o m·ªõi.");
        }
    }
}
